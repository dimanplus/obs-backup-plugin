name: Push
run-name: ${{ github.ref_name }} push run 🚀
on:
  push:
    branches:
      - master
      - main
      - 'release/**'
    tags:
      - '*'
permissions:
  contents: write
jobs:
  check-format:
    name: Check Formatting 🔍
    if: github.ref_name == 'master' || github.ref_name == 'main'
    uses: ./.github/workflows/check-format.yaml
    permissions:
      contents: read

  build-project:
    name: Build Project 🧱
    uses: ./.github/workflows/build-project.yaml
    secrets: inherit
    permissions:
      contents: read

    create-release:
    name: Create Release 🛫
    if: github.ref_type == 'tag'
    runs-on: ubuntu-24.04
    needs: build-project
    defaults:
      run:
        shell: bash
    steps:
      - name: Check Release Tag ☑️
        id: check
        run: |
          shopt -s extglob
          case "${GITHUB_REF_NAME}" in
            +([0-9]).+([0-9]).+([0-9]) )
              echo 'validTag=true' >> $GITHUB_OUTPUT
              echo 'prerelease=false' >> $GITHUB_OUTPUT
              echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
              ;;
            +([0-9]).+([0-9]).+([0-9])-@(beta|rc)*([0-9]) )
              echo 'validTag=true' >> $GITHUB_OUTPUT
              echo 'prerelease=true' >> $GITHUB_OUTPUT
              echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
              ;;
            *) echo 'validTag=false' >> $GITHUB_OUTPUT ;;
          esac

      # --- Скачиваем артефакты по именам, которые совпадают с upload из билдов ---
      - name: Download Windows Artifacts 📥
        if: fromJSON(steps.check.outputs.validTag)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-project.outputs.pluginName }}-${{ needs.build-project.outputs.pluginVersion }}-windows-x64-${{ needs.build-project.outputs.commitHash }}
          path: ./artifacts/windows

      - name: Download macOS Artifacts 📥
        if: fromJSON(steps.check.outputs.validTag)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-project.outputs.pluginName }}-${{ needs.build-project.outputs.pluginVersion }}-macos-universal-${{ needs.build-project.outputs.commitHash }}
          path: ./artifacts/macos

      - name: Download Linux Artifacts 📥
        if: fromJSON(steps.check.outputs.validTag)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-project.outputs.pluginName }}-${{ needs.build-project.outputs.pluginVersion }}-ubuntu-24.04-x86_64-${{ needs.build-project.outputs.commitHash }}
          path: ./artifacts/linux

      - name: Download Sources 📥
        if: fromJSON(steps.check.outputs.validTag)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-project.outputs.pluginName }}-${{ needs.build-project.outputs.pluginVersion }}-sources-${{ needs.build-project.outputs.commitHash }}
          path: ./artifacts/sources

      # Перемещаем все артефакты в корень для удобства создания релиза
      - name: Collect All Artifacts 🏷️
        if: fromJSON(steps.check.outputs.validTag)
        run: |
          shopt -s nullglob
          for dir in ./artifacts/*; do
            mv "$dir"/* .
          done

      # Генерируем контрольные суммы
      - name: Generate Checksums 🪪
        if: fromJSON(steps.check.outputs.validTag)
        run: |
          echo "### Checksums" > CHECKSUMS.txt
          for file in *.{exe,deb,ddeb,pkg,tar.xz,zip}; do
            if [[ -f "$file" ]]; then
              echo "    $file: $(sha256sum "$file" | cut -d ' ' -f 1)" >> CHECKSUMS.txt
            fi
          done

      - name: Create Release 🛫
        if: fromJSON(steps.check.outputs.validTag)
        id: create_release
        uses: softprops/action-gh-release@v9
        with:
          draft: true
          prerelease: ${{ fromJSON(steps.check.outputs.prerelease) }}
          tag_name: ${{ steps.check.outputs.version }}
          name: ${{ needs.build-project.outputs.pluginName }} ${{ steps.check.outputs.version }}
          body_path: CHECKSUMS.txt
          files: |
            *.dll
            *.pdb
            *.exe
            *.zip
            *.pkg
            *.deb
            *.ddeb
            *.tar.xz
